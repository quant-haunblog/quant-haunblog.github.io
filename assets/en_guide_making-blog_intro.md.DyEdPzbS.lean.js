import{_ as a,c as s,a2 as t,G as i,B as l,o as n}from"./chunks/framework.CdbxnhrM.js";const m=JSON.parse('{"title":"Creating a VitePress Blog","description":"The Quant-HaunBlog is a static site built with VitePress and hosted on GitHub Pages. VitePress is a great tool for building a blog that is both fast and easy to manage.","frontmatter":{"description":"The Quant-HaunBlog is a static site built with VitePress and hosted on GitHub Pages. VitePress is a great tool for building a blog that is both fast and easy to manage.","head":[["meta",{"property":"og:title","content":"Creating a VitePress Blog"}],["meta",{"property":"og:description","content":"The Quant-Haun Blog is a static site built with VitePress and hosted on GitHub Pages. VitePress is a great tool for building a blog that is both fast and easy to manage"}],["meta",{"property":"og:url","content":"https://quant-haunblog.github.io/en/guide/making-blog/intro"}]]},"headers":[],"relativePath":"en/guide/making-blog/intro.md","filePath":"en/guide/making-blog/intro.md","lastUpdated":null}'),r={name:"en/guide/making-blog/intro.md"};function c(d,e,h,u,g,b){const o=l("AdsInarticle");return n(),s("div",null,[e[0]||(e[0]=t('<h1 id="creating-a-vitepress-blog" tabindex="-1">Creating a VitePress Blog <a class="header-anchor" href="#creating-a-vitepress-blog" aria-label="Permalink to &quot;Creating a VitePress Blog&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">Language</p><ul><li><a href="/guide/making-blog/intro">한국어 페이지: Korean Page</a></li></ul></div><h2 id="how-i-created-the-quant-haunblog" tabindex="-1">How I Created the Quant-HaunBlog <a class="header-anchor" href="#how-i-created-the-quant-haunblog" aria-label="Permalink to &quot;How I Created the Quant-HaunBlog&quot;">​</a></h2><ol><li>Created a <code>static website</code> (<code>Quant-HaunBlog</code>) using <code>VitePress</code>, a static site generator.</li><li>Set up a blog <code>URL</code> using <code>GitHub Pages</code> to publish the blog.</li><li><code>Deployed</code> the blog to the <code>GitHub repository</code> using the deploy feature, making the blog accessible on the internet.</li><li>Integrated <code>Algolia</code> to implement search functionality for the site.</li><li>Registered the blog&#39;s <code>sitemap</code> and <code>URL</code> on <code>Google Search Console</code> to index my posts on Google search.</li><li>Linked the blog to <code>Google Analytics</code> to analyze visitor data, including <code>the keywords used to find the blog</code>.</li><li>Applied for <code>Google AdSense</code> to display ads. Once approved, placed ads in the desired positions on the blog. :::</li></ol><ul><li>I will introduce each of these steps on a separate page as a topic.</li></ul>',5)),i(o),e[1]||(e[1]=t('<h2 id="why-i-decided-to-create-my-own-blog" tabindex="-1">Why I Decided to Create My Own Blog <a class="header-anchor" href="#why-i-decided-to-create-my-own-blog" aria-label="Permalink to &quot;Why I Decided to Create My Own Blog&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Reasons for Creating My Own Blog</p><ul><li>There are various blog platforms (e.g., Naver Blog, Tistory, WordPress, Velog) that individuals commonly use to write online.</li><li>For someone like me, without technical knowledge, using a blog platform could have been a way to focus solely on writing.</li><li>However, I learned that by using a Static Site Generator (SSG), I could build a fast, content-focused static website myself.</li><li>My curiosity about new technologies, combined with my desire for a simple, text-heavy blog rather than a flashy one with fancy thumbnails, led me to create my own static site instead of using a platform.</li><li>Throughout the process of building and refining this blog, I learned a lot, and I&#39;d like to share some of that experience.</li></ul></div><h2 id="how-individuals-can-create-their-own-blog" tabindex="-1">How Individuals Can Create Their Own Blog <a class="header-anchor" href="#how-individuals-can-create-their-own-blog" aria-label="Permalink to &quot;How Individuals Can Create Their Own Blog&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">How Individuals Can Create Their Own Blog</p><ul><li>To create a blog and showcase it on the internet (this is called hosting), you will need: <ol><li><code>A blog to host</code> (There are various ways to create a blog website)</li><li><code>A server to host the blog</code> (There are many different methods to provide hosting services)</li></ol></li><li>These two things are required.</li></ul></div><h2 id="how-to-create-a-blog-for-hosting" tabindex="-1">How to Create a Blog for Hosting <a class="header-anchor" href="#how-to-create-a-blog-for-hosting" aria-label="Permalink to &quot;How to Create a Blog for Hosting&quot;">​</a></h2><h3 id="choosing-the-form-of-your-website" tabindex="-1">Choosing the Form of Your Website <a class="header-anchor" href="#choosing-the-form-of-your-website" aria-label="Permalink to &quot;Choosing the Form of Your Website&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Choosing the Form of Your Website</p><ul><li>First, you need to create your blog in the form of a <code>website</code> to showcase it on the internet.</li><li>A website consists of multiple <code>HTML</code> files. For a blog, you can think of it as creating <code>one HTML file for each post</code>.</li><li>If you had to create each of these HTML files manually, it would be difficult to focus on writing content.</li><li>Therefore, there are various ways to create websites, and it’s best to develop them using a method that fits the type of web pages you want to create.</li><li>Since the <code>Quant-Haun blog</code> is a <code>simple, content-focused blog</code>, it only needs to generate HTML files in advance and show the same content to all visitors. No interaction is required, so a <code>Static Site</code> was chosen as the form.</li></ul></div>',7)),i(o),e[2]||(e[2]=t('<h3 id="what-is-a-static-site" tabindex="-1">What is a Static Site? <a class="header-anchor" href="#what-is-a-static-site" aria-label="Permalink to &quot;What is a Static Site?&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Static Site</p><ul><li>A <code>Static Site</code> is a website made up of only <code>HTML</code>, <code>CSS</code>, and <code>JavaScript</code>.</li><li>Unlike <code>dynamic sites</code>, which change the web page based on user actions, a <code>static site</code> always displays the same content without any interaction from the user. This makes it easier to build and faster in terms of performance.</li></ul></div><h3 id="what-is-a-static-site-generator" tabindex="-1">What is a Static Site Generator? <a class="header-anchor" href="#what-is-a-static-site-generator" aria-label="Permalink to &quot;What is a Static Site Generator?&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Static Site Generator</p><ul><li>A <code>Static Site Generator</code> is a <code>framework</code> designed to easily create static sites.</li><li>A static site generator allows you to arrange <code>folders</code>, <code>Markdown files (md)</code>, <code>images</code>, and other resources according to a set structure. It then combines these to generate <code>pre-built HTML files</code> that the server only needs to host.</li><li>There are various static site generators based on different programming languages. One of the most commonly used is <code>Jekyll</code>, which is based on <code>Ruby</code>, and <code>Gatsby</code>, which is based on <code>React</code>.</li><li>Although less widely used, there are <code>VuePress</code> and <code>VitePress</code>, both of which are based on <code>Vue</code>. These are great for building simple websites, and since <code>Vue</code> plans to continue supporting <code>VitePress</code>, I decided to use it for creating the blog.</li><li>The method for creating a static site with <code>VitePress</code> will be introduced in the next post.</li></ul></div><h2 id="server-for-hosting-the-site" tabindex="-1">Server for Hosting the Site <a class="header-anchor" href="#server-for-hosting-the-site" aria-label="Permalink to &quot;Server for Hosting the Site&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Hosting Server</p><ul><li>Once you’ve created your site using a static site generator, you’ll need a <code>server</code> to host it.</li><li>You could host the site by setting up a server computer at home or by using paid hosting services, but for a small personal blog, free hosting options are available.</li><li>One such option that provides free hosting services is <code>GitHub Pages</code>.</li></ul></div><div class="warning custom-block"><p class="custom-block-title">GitHub Pages</p><ul><li><code>GitHub Pages</code> allows you to host one site for <code>free</code> as long as you have a <code>GitHub account</code>.</li><li>By creating a <code>repository</code> on <code>GitHub</code> and uploading your built site, you can access it through the URL <code>[GitHubID].github.io</code>. For example, the address of the <code>Quant-HaunBlog</code> is <code>quant-haunblog.github.io</code>, where <code>quant-haunblog</code> is my <code>GitHub ID</code>.</li><li>There’s no need to install anything, and the traffic limit is sufficient for a personal blog, making it a very convenient service.</li><li><code>GitHub Pages</code> provides the <code>Jekyll</code> static site generator by default. If you create your site with <code>Jekyll + GitHub Pages</code>, you can simply add posts and upload them to GitHub, and GitHub will automatically build and generate the site. This combination is ideal for personal blogs due to its simplicity.</li><li>However, you can still use GitHub Pages for free hosting with other static site generators. So, feel free to use any generator that suits your needs.</li><li>The <code>Quant-HaunBlog</code> was built using <code>VitePress</code> and is hosted on <code>GitHub Pages</code>.</li><li>The process of setting up a domain and deploying with GitHub Pages will be explained in the next post.</li></ul></div>',7))])}const p=a(r,[["render",c]]);export{m as __pageData,p as default};
