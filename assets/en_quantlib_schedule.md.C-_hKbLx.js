import{_ as n,c as l,j as e,a as h,G as a,a2 as t,B as d,o}from"./chunks/framework.CdbxnhrM.js";const m=JSON.parse('{"title":"QuantLib-Python: Schedule Class","description":"The Schedule class is used to generate and manage important dates such as payment dates and interest payment dates for financial instruments.","frontmatter":{"description":"The Schedule class is used to generate and manage important dates such as payment dates and interest payment dates for financial instruments.","head":[["meta",{"property":"og:title","content":"QuantLib-Python, Schedule Class"}],["meta",{"property":"og:description","content":"The Schedule class is used to generate and manage important dates such as payment dates and interest payment dates for financial instruments."}],["meta",{"property":"og:image","content":"/images/QuantLib.jpg"}],["meta",{"property":"og:url","content":"https://quant-haunblog.github.io/en/quantlib/schedule"}]]},"headers":[],"relativePath":"en/quantlib/schedule.md","filePath":"en/quantlib/schedule.md","lastUpdated":null}'),p={name:"en/quantlib/schedule.md"};function r(c,s,k,u,E,y){const i=d("AdsInarticle");return o(),l("div",null,[s[0]||(s[0]=e("h1",{id:"quantlib-python-schedule-class",tabindex:"-1"},[h("QuantLib-Python: Schedule Class "),e("a",{class:"header-anchor",href:"#quantlib-python-schedule-class","aria-label":'Permalink to "QuantLib-Python: Schedule Class"'},"​")],-1)),s[1]||(s[1]=e("p",null,[e("strong",null,"The Schedule class is used to generate and manage important dates such as payment dates and interest payment dates for financial instruments. This class simplifies schedule management for products with periodic cash flows, such as bonds or swaps.")],-1)),s[2]||(s[2]=e("p",null,[e("strong",null,"The Schedule class generates a list of schedules based on various date and frequency information, helping to easily manage dates that form the foundation for key calculations in financial contracts.")],-1)),a(i),s[3]||(s[3]=t('<h2 id="overview-of-the-schedule-class" tabindex="-1">Overview of the Schedule Class <a class="header-anchor" href="#overview-of-the-schedule-class" aria-label="Permalink to &quot;Overview of the Schedule Class&quot;">​</a></h2><h3 id="interest-payment-schedule" tabindex="-1">Interest Payment Schedule <a class="header-anchor" href="#interest-payment-schedule" aria-label="Permalink to &quot;Interest Payment Schedule&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Interest Payment Schedule</p><ul><li>Most <code>FICC</code> (Fixed Income, Currency, Commodity) products based on interest rates, such as bonds, swaps, caps, and floors, have an interest payment schedule. This <code>interest payment schedule</code> refers to a specific series of dates on which interest accrues periodically.</li><li>Typically, interest accrues on a quarterly or semi-annual basis, making it relatively simple to conceptualize such an interest payment schedule in theory.</li><li>However, in actual financial markets, the specific interest payment dates may vary slightly depending on each country’s <code>holidays</code>, product-specific <code>market conventions</code>, and <code>agreements with counterparties</code>. In other words, something that poses no issue in the world of theoretical modeling can become a significant issue in real financial markets.</li><li>The <code>Schedule</code> class in <code>QuantLib</code> is a very useful tool for implementing these real-world details in a sophisticated manner.</li></ul></div><h3 id="use-cases-of-the-schedule-class" tabindex="-1">Use Cases of the Schedule Class <a class="header-anchor" href="#use-cases-of-the-schedule-class" aria-label="Permalink to &quot;Use Cases of the Schedule Class&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">Use Cases of the Schedule Class</p><ul><li>The Schedule class generates a list of schedules based on various date and frequency information, helping to easily manage dates that form the foundation for key calculations in financial contracts.</li><li>The Schedule class can be used in a variety of financial instruments. For instance, it is used to generate <code>interest payment schedules for fixed-rate bonds</code> or <code>cash flow schedules for swap contracts</code>. This allows the automation of schedule calculations for complex financial products, reducing errors and standardizing schedule calculations.</li></ul></div>',5)),a(i),s[4]||(s[4]=t(`<h2 id="structure-of-the-schedule-class" tabindex="-1">Structure of the Schedule Class <a class="header-anchor" href="#structure-of-the-schedule-class" aria-label="Permalink to &quot;Structure of the Schedule Class&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">Structure of the Schedule Class</p><ul><li><p>The <code>Schedule</code> class is inherently more complex than the classes we&#39;ve looked at before.</p></li><li><p>This is because the <code>Schedule</code> class collects the necessary <code>classes</code> and <code>enumerations</code> to generate an interest payment schedule.</p></li><li><p>In other words, to generate a specific interest payment schedule, various <code>market conventions</code> stated in the <code>transaction specifications</code> need to be considered, and the <code>Schedule</code> class takes on this function.</p></li><li><p>Below is the structure for implementing the <code>Schedule</code> class.</p></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ql.Schedule(Date effectiveDate,                              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Effective date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Date terminationDate,                            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Termination date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Period tenor,                                    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Payment frequency</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Calendar calendar,                               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Calendar</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            BusinessDayConvention convention,                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Business day convention for payment dates</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            BusinessDayConvention terminationDateConvention, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Business day convention for termination date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            DateGeneration rule,                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Date generation rule</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Bool endOfMonth)                                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># End-of-month rule</span></span></code></pre></div></div><div class="info custom-block"><p class="custom-block-title">Key Parameters</p><ul><li>The key parameters to understand the Schedule class are as follows: <ul><li><code>Effective Date</code>: The start date on which the financial instrument becomes effective. The schedule is generated from this date.</li><li><code>Termination Date</code>: The date on which the schedule ends. Cash flows can occur up until this date.</li><li><code>Tenor</code>: Represents the frequency of the schedule, such as monthly, quarterly, semi-annually, or annually.</li><li><code>Calendar</code>: The business day calendar to apply to the schedule. It adjusts the schedule considering holidays or weekends specific to a region.</li><li><code>Business Day Convention</code>: A rule that determines how to handle dates that fall on weekends or holidays.</li><li><code>End of Month</code>: A Boolean value to determine if the end-of-month rule applies.</li></ul></li><li>By combining these parameters, one can easily define the complex schedule structure of financial contracts.</li></ul></div>`,3)),a(i),s[5]||(s[5]=t(`<p><code>DateGeneration</code> is an enumeration that defines how to generate the schedule for interest payment dates.</p><div class="warning custom-block"><p class="custom-block-title">DateGeneration</p><ul><li><code>ql.Backward</code>: Generates the interest payment schedule in a backward manner from the termination date to the effective date.</li><li><code>ql.Forward</code>: Generates the interest payment schedule in a forward manner from the effective date to the termination date.</li><li><code>ql.Zero</code>: No payment dates exist between the effective date and the termination date.</li><li><code>ql.ThirdWednesday</code>: Sets all intermediate interest payment dates, except for the effective date and termination date, to the third Wednesday of the respective month.</li><li><code>ql.Twentieth</code>: Sets all interest payment dates, except for the effective date, to the 20th of the respective month.</li><li><code>ql.TwentiethIMM</code>: Sets all interest payment dates, except for the effective date, to the 20th of March, June, September, and December.</li></ul></div><p><code>endOfMonth</code> is a parameter that determines whether the schedule should align with the end of the month.</p><div class="info custom-block"><p class="custom-block-title">endOfMonth</p><ul><li><code>endOfMonth</code> is a parameter that, if set to <code>True</code>, adjusts the interest payment dates to align with the month-end business day if the effective date is also a month-end business day.</li><li>If this value is <code>False</code>, the schedule is generated using the typical day-count convention, regardless of whether the effective date falls on a month-end.</li><li>For example, if February 28 is a month-end business day and <code>endOfMonth</code> is <code>True</code>, the next interest payment date after three months would be April 30 (instead of April 28), if April 30 is the month-end business day.</li></ul></div><p>Below is the source code that shows the <code>input parameters</code> required for implementing the <code>Schedule</code> class along with an implementation example of the <code>Schedule</code> class.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Components</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">effectiveDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Date(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2023</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terminationDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Date(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2026</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tenor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ql.Months)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">calendar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.NullCalendar()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">convention </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.ModifiedFollowing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terminationDateConvention </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.ModifiedFollowing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.DateGeneration.Backward</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">endOfMonth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Construction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Schedule(effectiveDate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        terminationDate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        tenor,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        calendar,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        convention,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        terminationDateConvention,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        rule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        endOfMonth)</span></span></code></pre></div>`,6)),a(i),s[6]||(s[6]=t(`<h2 id="functions-of-the-schedule-class" tabindex="-1">Functions of the Schedule Class <a class="header-anchor" href="#functions-of-the-schedule-class" aria-label="Permalink to &quot;Functions of the Schedule Class&quot;">​</a></h2><p>The purpose of the <code>Schedule</code> class is to generate an interest payment schedule based on market conventions and pass it to financial product objects that use it.</p><div class="tip custom-block"><p class="custom-block-title">Purpose of the Schedule Class</p><ul><li><p>For instance, if you are using <code>QuantLib</code> to implement a <code>Korean government bond</code>, the creation of the <code>Korean government bond</code> object requires an <code>interest payment schedule</code>, which is exactly what the <code>Schedule</code> class provides.</p></li><li><p>Given the nature of the Schedule class, it does not have many explicit methods intended for use in actual implementation. The role of the Schedule class is fulfilled by providing its results to the financial product we want to price.</p></li></ul></div><p>However, let&#39;s take a look at the methods <code>nextDate</code> and <code>previousDate</code>, which are often used in actual implementations.</p><div class="warning custom-block"><p class="custom-block-title">Schedule Class Methods</p><ul><li><code>nextDate(Date)</code>: Returns the interest payment date immediately after the given date.</li><li><code>previousDate(Date)</code>: Returns the interest payment date immediately before the given date.</li></ul></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ref_date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Date(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Functions</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Previous Payment Date from </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ref_date.ISO()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule.previousDate(ref_date).ISO()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Next Payment Date from </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ref_date.ISO()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule.nextDate(ref_date).ISO()</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Output</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Previous Payment Date from 2024-08-15 : 2024-06-10</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Next Payment Date from 2024-08-15 : 2024-12-10</span></span></code></pre></div><h2 id="makeschedule" tabindex="-1">MakeSchedule <a class="header-anchor" href="#makeschedule" aria-label="Permalink to &quot;MakeSchedule&quot;">​</a></h2><p><code>ql.MakeSchedule(effectiveDate, terminationDate, frequency)</code></p><div class="warning custom-block"><p class="custom-block-title">Optional params</p><ul><li>calendar=None</li><li>convention=None</li><li>terminalDateConvention=None</li><li>rule=None</li><li>forwards=False</li><li>backwards=False</li><li>endOfMonth=None</li><li>firstDate=None</li><li>nextToLastDate=None</li></ul></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">effectiveDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Date(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2020</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">terminationDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Date(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2022</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">frequency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;6M&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schedule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.MakeSchedule(effectiveDate, terminationDate, frequency)</span></span></code></pre></div>`,10))])}const f=n(p,[["render",r]]);export{m as __pageData,f as default};
