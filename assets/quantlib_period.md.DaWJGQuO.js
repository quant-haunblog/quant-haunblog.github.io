import{_ as n,c as l,a2 as s,G as t,B as e,o as h}from"./chunks/framework.CdbxnhrM.js";const y=JSON.parse('{"title":"퀀트립(QuantLib-Python): Period 클래스","description":"QuantLib Period 클래스는 기간을 나타내는 데 사용되며, 날짜 간의 간격을 정의하는 중요한 클래스이다. 금융 상품의 만기 기간, 이자 지급 주기 등에서 기간을 정의하는 데 주로 사용된다.","frontmatter":{"description":"QuantLib Period 클래스는 기간을 나타내는 데 사용되며, 날짜 간의 간격을 정의하는 중요한 클래스이다. 금융 상품의 만기 기간, 이자 지급 주기 등에서 기간을 정의하는 데 주로 사용된다.","head":[["meta",{"property":"og:title","content":"퀀트립(QuantLib-Python), Period 클래스"}],["meta",{"property":"og:description","content":"QuantLib Period 클래스는 기간을 나타내는 데 사용되며, 날짜 간의 간격을 정의하는 중요한 클래스이다. 금융 상품의 만기 기간, 이자 지급 주기 등에서 기간을 정의하는 데 주로 사용된다."}],["meta",{"property":"og:image","content":"/images/QuantLib.jpg"}],["meta",{"property":"og:url","content":"https://quant-haunblog.github.io/quantlib/period"}]]},"headers":[],"relativePath":"quantlib/period.md","filePath":"ko/quantlib/period.md","lastUpdated":null}'),p={name:"quantlib/period.md"};function k(d,i,o,r,c,E){const a=e("AdsInarticle");return h(),l("div",null,[i[0]||(i[0]=s('<h1 id="퀀트립-quantlib-python-period-클래스" tabindex="-1">퀀트립(QuantLib-Python): Period 클래스 <a class="header-anchor" href="#퀀트립-quantlib-python-period-클래스" aria-label="Permalink to &quot;퀀트립(QuantLib-Python): Period 클래스&quot;">​</a></h1><p><strong>QuantLib <code>Period</code> 클래스는 <code>기간</code>을 나타내는 데 사용되며, <code>날짜 간의 간격을 정의</code>하는 중요한 클래스이다.</strong></p><p><strong>금융 상품의 만기 기간, 이자 지급 주기 등에서 기간을 정의하는 데 주로 사용된다.</strong></p><div class="info custom-block"><p class="custom-block-title">Language</p><ul><li><a href="/en/quantlib/period">English Page: 영어 페이지</a></li></ul></div>',4)),t(a),i[1]||(i[1]=s(`<h2 id="period-클래스-개요" tabindex="-1">Period 클래스 개요 <a class="header-anchor" href="#period-클래스-개요" aria-label="Permalink to &quot;Period 클래스 개요&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Period Class</p><ul><li>모든 <code>파생상품</code>은 기본적으로 <code>효력발생일</code>, <code>만기일</code>, <code>결제일</code>, <code>이자지급일</code> 등과 같이 상품에 대한 여러 가지 날짜 정보가 필요하다.</li><li>이러한 정보들은 <code>파생상품</code>을 구성하는 기본적인 요소일 뿐만 아니라 이러한 정보들을 어떻게 정의하냐에 따라 상품의 가격이 다를 수 있기에, <code>파생상품</code>을 거래하기 위한 <code>거래명세서</code>에는 이러한 디테일들이 매우 자세하게 기입되어 있다.</li><li>이러한 날짜 정보가 필요한 이유는 본질적으로 어떤 상품의 만기가 얼마나 남았는지 혹은 이자지급일까지의 기간이 얼마나 남았는지 파악하기 위함이다.</li><li>다시 말해 <code>프라이싱</code> 혹은 <code>포지션 관리</code>를 위해 우리가 관심을 가져야 할 사항은 사실 <code>날짜</code>가 아닌 <code>기간</code>이다.</li><li>즉, 시간의 절대적인 시점보다는 상대적인 구간이 더 중요하다는 말이며, 우리의 관점은 점보다는 선에 초점이 맞춰줘야 한다는 뜻이다.</li></ul></div><h2 id="period-클래스-구조" tabindex="-1">Period 클래스 구조 <a class="header-anchor" href="#period-클래스-구조" aria-label="Permalink to &quot;Period 클래스 구조&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Period 클래스 구조</p><p><code>Date</code> 클래스가 <code>특정 날짜</code>를 정의하기 위해 존재한다면, <code>Period</code> 클래스는 <code>특정 기간</code>을 정의하기 위해 존재한다. <code>Period</code> 클래스는 시점을 정확히 정의하는 것이 목적이 아니라 <code>시점과 시점 사이의 기간</code>을 정하기 위한 것이다. <code>Period</code> 클래스를 사용하기 위해서는 다음과 같은 구조를 따라야 한다.</p></div><h3 id="period-클래스-구현방법-1" tabindex="-1">Period 클래스 구현방법 #1 <a class="header-anchor" href="#period-클래스-구현방법-1" aria-label="Permalink to &quot;Period 클래스 구현방법 #1&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">#1, ql.Period(Integer, TimeUnits)</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ql.Period(Integer, TimeUnits)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">period </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ql.Months)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3M</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(period.length())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(period.units())   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Months</span></span></code></pre></div><ul><li>첫 번째 방식은 인자에 정수(<code>Integer</code>) 그리고 시간 단위(<code>TimeUnits</code>)를 설정해 주는 방식이다.</li><li>정수의 경우 일반적인 숫자를 입력하면 되지만 여기서 주의해야 할 것은 바로 시간이다. 퀀트립에는 각기 다른 목적을 위한 다양한 열거형이 존재한다.</li><li><code>열거형(Enumeration)</code>이란 어떤 일련의 멤버들로 구성된 집합을 이루는 자료형을 의미하는데, 특정 열거형은 사용자가 어떤 목적을 위해 조직한 그룹과 같다. 시간 단위 또한 이러한 열거행의 하나로써 아래와 같은 멤버들을 가지고 있다.</li><li>예를 들어, 3개월이란 기간을 정의하고 싶다면 첫 번째 인자에 3 을, 두 번째 인자에 ql.Months 를 입력해 주면 된다.</li></ul></div><div class="warning custom-block"><p class="custom-block-title">TimeUnits</p><ul><li>ql.Days</li><li>ql.Weeks</li><li>ql.Months</li><li>ql.Years</li></ul></div><h3 id="period-클래스-구현방법-2" tabindex="-1">Period 클래스 구현방법 #2 <a class="header-anchor" href="#period-클래스-구현방법-2" aria-label="Permalink to &quot;Period 클래스 구현방법 #2&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">#2, ql.Period(Frequency)</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ql.Period(Frequency)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">period </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(ql.Semiannual)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(period)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 6M</span></span></code></pre></div><ul><li>Period 클래스를 정의하는 두 번째 방식은 인자에 <code>주기(Frequency)</code>를 입력하는 방법이다.</li><li>퀀트립에서는 주기 또한 열거형으로 만들어져 있으며, 아래는 주기 열거형을 구성하고 있는 멤버들이다.</li><li>이러한 주기 열거형은 특정 주기별로 이자를 지급하는 이자율 스왑이나 통화 스왑 같은 상품을 구현하는데 있어 자주 사용되는 기능이다.</li></ul></div><div class="warning custom-block"><p class="custom-block-title">Frequency</p><ul><li>ql.Annual</li><li>ql.Semiannual</li><li>ql.Quarterly</li><li>ql.Monthly</li><li>ql.Biweekly</li><li>ql.Daily</li><li>ql.Once</li></ul></div><h2 id="period-클래스-기능" tabindex="-1">Period 클래스 기능 <a class="header-anchor" href="#period-클래스-기능" aria-label="Permalink to &quot;Period 클래스 기능&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">Period 클래스 기능</p><p><code>Period</code> 클래스의 주요 기능은 <code>Date</code> 와 결합하여 날짜에 대한 <code>산술 계산(Arithmetic Operation)</code>을 가능하게 한다는 점이다. 예를 들어, 2024년 4월 10일부터 <code>3주</code>, <code>3개월</code>, 혹은 <code>3년</code> 후의 날짜가 궁금하다고 하자.<br><code>Date</code> 클래스와 <code>Period</code> 클래스를 결합하면 이러한 질문들에 매우 쉽게 답할 수 있다. 이처럼 날짜에 특정 기간을 더하고 빼는 기능은 퀀트립이 가지고 있는 유용한 기능 중 하나이다. 이러한 산술 계산은 날짜와 날짜 간에도 가능한대, 이는 날짜와 날짜 사이의 기간이 얼마인지에 대한 답을 제공한다.</p></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Functions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QuantLib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Date(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Date(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;After 3 Weeks : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ql.Weeks)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;After 3 Months : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ql.Months)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;After 3 Years : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ql.Period(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ql.Years)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Days between Date2 and Date1 = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">date2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## OutPut</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## After 3 Weeks : May 1st, 2024   </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## After 3 Months : July 10th, 2024</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## After 3 Years : April 10th, 2027</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## Days between Date2 and Date1 = 265</span></span></code></pre></div>`,13))])}const u=n(p,[["render",k]]);export{y as __pageData,u as default};
